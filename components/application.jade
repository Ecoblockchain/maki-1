dom-module#maki-application
  style.
    #navigation {
      width: 100%;
    }
  
  template
    maki-datastore(name="#{config.service.namespace}")
    maki-channel(autoconnect, reconnect="true")
    
    .pusher
      .ui.inverted.vertical.center.aligned.segment
        .ui.container
          maki-navbar
      
      .content(for="viewport")
        maki-index

      .ui.inverted.vertical.footer.segment
        .ui.container
          .ui.stackable.inverted.divided.equal.height.stackable.grid
            .six.wide.column
              h4.ui.inverted.header About
              p This website is powered by Maki, a full-stack framework that implements strong-typing at the network level.  You can see and engage with <a href="/api">the auto-generated API</a> to learn more.
              p Maki is a labor of love, a result of several years of iterations and re-architectures in pursuit of a clean, hand-rolled framework for building clean, useful applications.  We hope you like it.
              //-.ui.inverted.link.list
                a.item(href="#") Protocol
                a.item(href="#") Whitepaper
                a.item(href="#") Roadmap
                a.item(href="#") Contact Us
            .seven.wide.column
              h4.ui.inverted.header Copyleft
              p #{config.service.name} has not supplied a LICENSE file in <code>config/index.json</code>.
              p Maki is copyleft, and encourages you to copy, clone, and <em>create</em>.  After all, without a rich public domain, how else can we innovate?  Much to our chagrin, the software itself is more formally <a href="https://github.com/martindale/maki/blob/master/LICENSE">MIT licensed</a>, while our content is licensed under <a href="http://creativecommons.org/licenses/by/4.0/">CC-BY</a>.
            .three.wide.column
              h4.ui.inverted.header Elsewhere
              .ui.inverted.link.list
                a.item(href="https://github.com/martindale/maki", rel="me")
                  i.icon.github
                  |  GitHub
                a.item(href="https://twitter.com/martindale", rel="me")
                  i.icon.twitter
                  |  Twitter
                a.item(href="https://facebook.com/eric.martindale", rel="me")
                  i.icon.facebook
                  |  Facebook
                //-a.item(href="#", rel="me")
                  i.icon.medium
                  |  Medium

  script(src="/js/page.min.js")
  script(src="/js/jquery.js")
  script.
    window.maki = Polymer({
      is: 'maki-application',
      properties: {
        src: {
          type: String
        },
        for: {
          type: String
        },
        route: {
          type: String
        },
        routes: {
          type: Object,
          value: {}
        },
        components: {
          type: Object,
          value: {}
        },
        resources: {
          type: Object,
          observer: '_resourcesUpdated'
        },
        datastore: {
          type: Object
        },
        worker: { type: Object }
      },
      _route: function(ctx) {
        var self = this;

        var component = 'maki-undefined';
        for (var route in self.routes) {
          var regex = self.routes[route];
          if (regex.test(ctx.path)) {
            component = self.components[route];
            break;
          }
        }
        
        // TODO: use Polymer to manage this
        var not = document.querySelectorAll(':not([href="'+ctx.path+'"])');
        var is = document.querySelectorAll('[href="'+ctx.path+'"]');
        for (var i = 0; i < not.length; i++) {
          not[i].classList.remove('active');
        }
        for (var i = 0; i < is.length; i++) {
          is[i].classList.add('active');
        }
        
        console.log('[MAKI:APPLICATION]', '_route', ctx.path, self.routes, component);

        var view = document.createElement(component);
        view.setAttribute('src', ctx.path);
        view.type = self.resourceMap[ctx.path];

        var viewport = document.querySelectorAll('[for=viewport]')[0];
        while (viewport.hasChildNodes()) {
          viewport.removeChild(viewport.lastChild);
        }
        viewport.appendChild(view);
      },
      _resourcesUpdated: function(resources) {
        var self = this;
        var _route = self._route.bind(self);

        self.routes['/'] = new RegExp(/^\/$/);
        self.components['/'] = (resources.Index && resources.Index.components) ? resources.Index.components.query : 'maki-index';
        self.resourceMap = {};
        
        console.log('[MAKI:APPLICATION]', '_resourcesUpdated', resources);
        
        page('/', _route);

        Object.keys(resources).forEach(function(name) {
          var resource = resources[name];
          console.log('[MAKI:APPLICATION]', 'initializing', name);
          if (resource.internal) return;
          ['get', 'query'].forEach(function(action) {
            var route = resource.routes[action];
            if (!route) return;
            self.routes[route] = new RegExp(eval(resource.paths[action]));
            self.components[route] = resource.components[action];
            self.resourceMap[route] = resource;
            page(route, _route);
          });
        });
        
        page('*', _route);
        
        page();
      },
      created: function() {
        var self = this;

        self.route = window.location.pathname;
        //self.worker = new Worker('/worker.js');
        
        $.ajax({
          type: 'OPTIONS',
          url: '/',
          headers: {
            'Accept': 'application/json'
          },
          success: function(data) {
            self.config = data.config;
            self.resources = data.resources;
          }
        });
      }
    });
