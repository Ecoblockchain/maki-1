dom-module#maki-application
  template
    maki-content-store(name="#{config.service.namespace}")
    maki-datastore(name="#{config.service.namespace}", for="#{config.service.namespace}")
    maki-channel(autoconnect, reconnect="true")
    //-maki-service
    //-maki-peer-manager(autoconnect, limit="128", strategy="lowest-latency")
    
    maki-navbar.ui.large.top.fixed.hidden.menu
    maki-navbar.ui.vertical.inverted.sidebar.right.large.menu

    maki-masthead#masthead
      maki-made-with

    maki-viewport#viewport
      block content
        maki-splash

    .ui.inverted.vertical.footer.segment
      .ui.container
        block footer
          maki-footer

    maki-analytics

  script(src="/js/page.min.js", async)
  script(src="/assets/objectid.js", async)
  script(src="/assets/async.min.js", async)
  script.
    window.maki = Polymer({
      is: 'maki-application',
      properties: {
        src: { type: String },
        for: { type: String },
        route: { type: String },
        routes: { type: Object, value: {} },
        components: { type: Object, value: {} },
        resources: { type: Object, observer: '_resourcesUpdated' },
        datastore: { type: Object },
        worker: { type: Object },
        identity: { type: Object, notify: true },
        state: { type: String }
      },
      _pathToResource: function(path) {
        var self = this;
        var resource = null;
        
        console.log('[MAKI:APPLICATION]', '_pathToResource', path);
        
        for (var route in self.routes) {
          var regex = self.routes[route];
          
          console.log('[MAKI:APPLICATION]', '_pathToResource', 'testing', regex);
          
          if (regex.test(path)) {
            resource = self.resourceMap[route];
            break;
          }
        }

        console.log('[MAKI:APPLICATION]', '_pathToResource', path, 'finally:', resource);
        
        return resource;
      },
      _route: function(ctx) {
        var self = this;
        var viewport = this.$.viewport;
        var component = 'maki-undefined';
        var masthead = null;
        var view = null;

        if (!viewport) {
          console.warn('[MAKI:APPLICATION]', 'no viewport provided');
          return false;
        }

        for (var route in self.routes) {
          var regex = self.routes[route];
          
          console.log('[MAKI:APPLICATION]', '_route', 'routing', route, regex);
          console.log('[MAKI:APPLICATION]', '_route', 'comparing...', ctx.path);
          
          if (regex.test(ctx.path)) {
            component = self.components[route];
            masthead = self.resourceMap[route].options.components.masthead;
            view = document.createElement(component);
            
            console.log('[MAKI:APPLICATION]', '_route', 'found:', component);
            console.log('[MAKI:APPLICATION]', '_route', 'selected:', view);
            console.log('[MAKI:APPLICATION]', '_route', 'masthead:', masthead);

            view.action = self.actionMap[route];
            view.type = self.resourceMap[route];
            view.type.route = route;

            break;
          }
        }

        if (!view) {
          view = document.createElement(component);
        }
        
        view.setAttribute('src', ctx.path);
        view.setAttribute('type', view.type.name);

        self.$.masthead.component = masthead;

        while (viewport.hasChildNodes()) {
          viewport.removeChild(viewport.lastChild);
        }

        viewport.appendChild(view);

      },
      /*
          Configures the Router, which provides human-friendly URLs 
      
       */
      _resourcesUpdated: function(resources) {
        var self = this;
        var _route = self._route.bind(self);
        
        self.resourceMap = {};
        self.actionMap = {};
        
        console.log('[MAKI:APPLICATION]', '_resourcesUpdated', resources);
        
        Object.keys(resources).forEach(function(name) {
          var definition = resources[name];
          
          console.log('[MAKI:APPLICATION]', '_resourcesUpdated', 'definition', definition);
          
          ['get', 'query'].forEach(function(action) {
            var route = definition.routes[action];
            if (!route) return;
            
            self.routes[route] = new RegExp(eval(definition.paths[action]));
            self.components[route] = definition.components[action];
            self.resourceMap[route] = definition;
            self.actionMap[route] = action;
            
            page(route, _route);
          });
        });
        
        self.routes['/'] = new RegExp(/^\/$/);
        self.components['/'] = (resources.Index && resources.Index.components) ? resources.Index.components.query : 'maki-index';
        
        page('/', _route);
        page('*', _route);
        
        page();
      },
      created: function() {
        var self = this;
        console.log('[MAKI:APPLICATION]', 'created');
        self.route = window.location.pathname;
        //self.worker = new Worker('/worker.js');
        // load the application configuration
        $.ajax({
          type: 'OPTIONS',
          url: '/',
          headers: {
            'Accept': 'application/json'
          },
          success: function(data) {
            self.config = data.config;
            self.resources = data.resources;
          }
        });
      },
      ready: function() {
        console.log('[MAKI:APPLICATION]', 'ready');
        
        // fix menu when passed
        $('.masthead').visibility({
          once: false,
          onBottomPassed: function() {
            $('.fixed.menu').transition('fade in');
          },
          onBottomPassedReverse: function() {
            $('.fixed.menu').transition('fade out');
          }
        });

        // create sidebar and attach to menu open
        $('.ui.sidebar').sidebar('attach events', '.toc.item');

      }
    });
