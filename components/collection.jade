dom-module#maki-collection(extends="maki-component")
  template
    .ui.five.cards
      template(is="dom-repeat", items="{{items}}")
        maki-item(src="/people/{{item.id}}", item="{{item}}")

  script(src="/js/jquery.js")
  script(src="/js/lodash.min.js")
  script(src="/js/uuid.js")
  script(src="/js/jsonrpc.js")
  script(src="/js/json-patch-duplex.min.js")
  script.
    Polymer({
      is: 'maki-collection',
      listeners: {
        'datastore:query':  '_handleQuery',
        'datastore:miss':   '_handleMiss',
        'datastore:update': '_applyState',
        'state:change':     '_applyState'
      },
      properties: {
        src: {
          type: String,
          observer: '_sourceChanged'
        },
        ws: {
          type: String
        },
        hash: {
          type: String
        },
        items: {
          type: Array
        },
        as: {
          type: String,
          value: 'item'
        }
      },
      _connect: function() {
        var self = this;
        var maki = document.querySelectorAll('maki-application')[0];
        var path = 'ws://localhost:9200' + self.src;
        
        console.log('connecting to', path);
        
        self.ws = new WebSocket(path);
        self.ws.onclose = function onClose() {
          setTimeout(function() {
            self._connect();
          }, 500);
        }
        self.ws.onmessage = function onMessage(msg) {
          try {
            var data = JSON.parse( msg.data );
          } catch (e) {
            var data = {};
          }
          // experimental JSON-RPC implementation
          if (data.jsonrpc === '2.0') {
            switch (data.method) {
              case 'ping':
                console.log('was ping, playing pong');
                self.ws.send(JSON.stringify({
                  'jsonrpc': '2.0',
                  'result': 'pong',
                  'id': data.id
                }));
              break;
              case 'patch':
                // TODO: update in-memory data (two-way binding);
                console.log('patch:', data );
                if (data.params.channel === self.src) {
                  console.log('go hard in the paint!', self.items, data.params.ops);
                  jsonpatch.apply(self.items, data.params.ops);
                  console.log('go hard in the paint!', self.items);
                }
              break;
              default:
                console.log('unhandled jsonrpc method ' , data.method);
              break;
            }
          } else {

          }
        }
        self.ws.onopen = function onOpen() {
          console.log('open!');
          // this is redundant, as the connection will already be subscribed
          // however, we need to modify internal stores, so call it anyways
          self._subscribe(self.src);
        }

      },
      _subscribe: function(path) {
        console.log('subscribing to:', path);
      },
      _handleQuery: function(e) {
        var self = this;
        var maki = document.querySelectorAll('maki-application')[0];
        var hash = e.detail;
        maki.datastore.get(hash, { asBuffer: false }, function(err, data) {
          if (err) console.error(err);
          if (!data) self.fire('datastore:miss', hash);

          self.fire('datastore:miss', hash);
          self.fire('state:change', data);
          
          self._connect();
          
        });
      },
      _handleMiss: function(e) {
        var self = this;
        var maki = document.querySelectorAll('maki-application')[0];
        var hash = e.detail;
        var path = self.src;
        console.log('missed path:', path);
        $.getJSON(self.src, function(data) {
          console.log('retrieved (from remote)', data);
          self.fire('state:change', data);
          maki.datastore.put(hash, data, function(err) {
            if (err) console.error(err);
          });
        });
      },
      _applyState: function(e) {
        var self = this;
        console.log('applying state', e, e.detail);
        self.items = e.detail;
      },
      _retrieveState: function() {
      
      },
      _sourceChanged: function(source) {
        var self = this;
        var maki = document.querySelectorAll('maki-application')[0];
        maki.worker.onmessage =  function(e) {
          var hash = e.data;
          console.log('hash:', hash);
          self.fire('datastore:query', hash);
        };
        maki.worker.postMessage(source);
      },
      attached: function() {
        var self = this;
        console.log('collection ready', self.src);
      }
    });
