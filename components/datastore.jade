dom-module#maki-datastore
  script(src="/js/json-patch-duplex.min.js")
  script.
    Polymer({
      is: 'maki-datastore',
      properties: {
        name: { 
          type: String
        },
        store: {
          type: Object
        }
      },
      listeners: {
        'datastore:miss':   '_handleMiss',
        'datastore:change': '_handleChange'
      },
      _store: function(key, val, cb) {
        var self = this;
        self.store.put(key, val, function(err) {
          if (err) console.error(err);
          self.fire('datastore:change', {
            key: key,
            val: val
          });
        });
      },
      _retrieve: function(key, cb) {
        var self = this;
        console.log('_retrieve:', key);
        self.store.get(key, {
          asBuffer: false
        }, function(err, val) {
          if (err) console.error(err);
          if (!val) return self.fire('datastore:miss', key);
          console.log('_retrive result:', key, val);
          return cb(err, val);
        });
      },
      _patch: function(key, ops, cb) {
        var self = this;
        console.log('datastore:patch:', key, ops);
        self._retrieve(key, function(err, obj) {
          if (err) console.error(err);
          console.log('applying to:', obj);
          jsonpatch.apply(obj, ops);
          console.log('obj now:', obj);

          self._store(key, obj, function(err) {
            if (err) console.error(err);
          });
        });
      },
      _handleMiss: function(e, detail) {
        var self = this;
        var key = e.detail;
        var datastore = document.querySelectorAll('maki-datastore')[0];
        
        console.log('_handleMiss', e, detail);

        $.getJSON(key, function(data) {
          console.log('retrieved (from remote)', data);
          if (!data) return;
          datastore._store(key, data, function(err) {
            if (err) console.error('_handeMiss error:', err);
          });
        });
      },
      _handleChange: function(e, detail) {
        var self = this;
        console.log('change:', e, detail);
        var key = detail.key;
        var val = detail.val;
        
        console.log('stuff:', key, val);
        var elements = document.querySelectorAll('[src="'+key+'"]');
        console.log('elements:', elements)
        for (var i = 0; i < elements.length; i++) {
          var element = elements[i];
          console.log('found a bound element:', element);
          console.log('attaching elements:', val);
          //element.items = val;
          element.set('items', val);
        }
      },
      ready: function() {
        var self = this;
        self.store = level(self.name);
        self.store.open(function(err) {
          if (err) console.error(err);
          var elements = document.querySelectorAll('[src]');
          console.log('elements:', elements)
          for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            if (typeof element._sync === 'function') {
              element._sync();
            }
          }
          
        });
      }
    });
