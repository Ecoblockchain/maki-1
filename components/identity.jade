dom-module#maki-identity
  template
    maki-datastore(name="identity", private)
    //- TODO: this should be a /people thing, not an identity
    template(is="dom-if", if="{{!hasIdentities}}")
      a.item(on-tap="_onboard")
        i.icon.sign.in
        | Sign In
    template(is="dom-if", if="{{hasIdentities}}")
      template(is="dom-if", if="{{!isLoggedIn}}")
        .ui.dropdown.item
          i.icon.sign.in
          | Sign In
          i.icon.dropdown
          maki-identity-list.menu
            template(is="dom-repeat", items="{{identities}}")
              maki-identity-card.item(identity="{{item}}", on-tap="_selectIdentity") {{item.name}}
            .green.icon.labeled.item(on-tap="_onboard")
              i.icon.leaf
              | Start Fresh
      template(is="dom-if", if="{{isLoggedIn}}")
        //-a.item(href="/settings")
          i.icon.setting
        a.item(href="/people/{{identity.name}}")
          template(is="dom-if", if="{{isNamed}}") {{identity.name}}
          template(is="dom-if", if="{{!isNamed}}") anonymous
        .ui.button.item(on-tap="_logout")
          i.icon.sign.out
          | Sign Out

    maki-modal.ui.modal#identity-confirm
      .header Welcome to the Identity Library.
      .content
        .description
          p Identities are secure ways to tell people who we are.  Once you have one, you can take it with you anywhere.
          .ui.two.massive.buttons
            .ui.blue.labeled.icon.button(on-tap="_importFromSeed")
              i.icon.eyedropper
              | Import From Seed
            .or
            .ui.green.right.labeled.icon.button(on-tap="_displayGeneratorModal")
              i.icon.leaf
              | Clean Start
      .actions
        .ui.right.labeled.icon.button(on-tap="_closeSelectionModal") Some other time.
          i.remove.icon

    maki-modal.ui.modal#identity-create
      .header Identity Generator
      .content
        .description
          maki-step-ladder
          .clearing

      .actions
        .ui.cancel.labeled.icon.button.hidden(on-tap="_displayNameModal") Nevermind, I'm done here.
          i.remove.icon

  script(src="/js/lodash.min.js", async)
  script(src="/assets/bitcore.min.js", async)
  script(src="/assets/bitcore-mnemonic.min.js", async)
  script.
    Polymer({
      is: 'maki-identity',
      properties: {
        seed: {
          type: String
        },
        words: {
          type: String
        },
        identity: {
          type: Object,
          notify: true,
          observer: '_identityChanged'
        },
        isLoggedIn: {
          type: Boolean,
          value: false
        },
        autoselect: {
          type: Boolean,
          value: false
        },
        hasIdentities: {
          type: Boolean,
          value: false
        },
        isNamed: {
          type: Boolean,
          value: false
        },
        display: {
          type: String
        }
      },
      _authenticate: function() {
        
      },
      _displaySelectionModal: function() {
        $('.modal#identity-confirm').modal('show');
      },
      _displayGeneratorModal: function() {
        $('.modal#identity-create').modal('show');
      },
      _closeGeneratorModal: function() {
        $('.modal#identity-create').modal('hide');
      },
      _closeSelectionModal: function() {
        $('.modal#identity-confirm').modal('hide');
      },
      _initializeDropdown: function() {
        console.log('[MAKI:IDENTITY]', '_initializeDropdown');
        $('.ui.dropdown').dropdown({
          action: 'nothing'
        });
      },
      _sign: function(input, done) {
        var Message = require('bitcore-message');
      },
      _identityChanged: function(identity, old) {
        var self = this;
        console.log('[MAKI:IDENTITY]', '_identityChanged', identity, old);
        self.isLoggedIn = true;
        self.hasIdentities = true;
        if (identity && identity.name) {
          self.isNamed = true;
        }

        self.fire('identity', identity);
        self._initializeDropdown();
      },
      _onboard: function() {
        var self = this;
        self._select();
      },
      _register: function() {
        var self = this;
        console.log('[MAKI:IDENTITY]', '_register');
        self._publish(function() {
          // TODO: use purely local store
          $.ajax({
            type: 'POST',
            url: '/people',
            data: {
              name: self.identity.name,
              identity: self.identity.key.public,
              _identity: self.identity._id
            },
            headers: {
              Accept: 'application/json'
            },
            success: function(data, res) {
              console.log('[MAKI:IDENTITY]', '_register result:', res);
            }
          });
        });
      },
      _publish: function(cb) {
        var self = this;
        console.log('[MAKI:IDENTITY]', '_publish');
        if (!cb) cb = new Function();
        
        var clone = _.cloneDeep(self.identity);
        delete clone.seed;
        delete clone.key.private;
        
        // TODO: use purely local store
        $.ajax({
          type: 'PUT',
          url: '/identities/' + clone.key.public,
          data: clone,
          headers: {
            Accept: 'application/json'
          },
          success: function(data) {
            console.log('[MAKI:IDENTITY]', 'published:', data);
            self.identity._id = data._id;
            cb();
          }
        });
        
      },
      _save: function(cb) {
        var self = this;
        var db = document.querySelectorAll('maki-datastore[name=identity]')[0];
        var identity = self.identity;

        db._store('/identities', [identity], function(err) {
          if (err) console.log('err', err);
          cb(err);
        });
        
        db._store('/identities/' + identity.key.public, identity, function(err) {
        
        });
      },
      _initiateGeneration: function() {
        var self = this;
        
        self._closeSelectionModal();
        self._generate();
        
      },
      _generate: function(cb) {
        var self = this;
        console.log('[MAKI:IDENTITY]', '_generate');
        // TODO: do this in a Web Worker to prevent UI jank
        var Mnemonic = require('bitcore-mnemonic');
        var mnemonic = new Mnemonic();

        var key = mnemonic.toHDPrivateKey();
        var sub = key.derive('m/0');

        self.seed = mnemonic;
        self.words = mnemonic.toString();

        self.identity = {
          seed: mnemonic.toString(),
          //address: sub.hdPublicKey.toAddress(),
          key: {
            hd: true,
            private: key.toString(),
            public: sub.hdPublicKey.toString()
          }
        };
        
        self._save(cb);

      },
      _select: function() {
        var self = this;
        var db = document.querySelector('maki-datastore[name=identity]');
        var melody = document.querySelectorAll('melody-application')[0];
        
        console.log('[MAKI:IDENTITY]', '_select');
        db._retrieve('/identities', function(err, identities) {
          console.log('[MAKI:IDENTITY]', 'retrieved', identities);
          self.identities = identities || [];
          self._displaySelectionModal();
        });
      },
      _selectIdentity: function(e, detail) {
        var self = this;
        console.log('[MAKI:IDENTITY]', '_selectIdentity', e, detail);
        var manager = document.querySelector('maki-identity');
        e.target.classList.add('loading');
        manager.identity = e.target.identity;
        manager._register();
      },
      _attach: function() {
        var self = this;
        var db = document.querySelector('maki-datastore[name=identity]');
        var manager = document.querySelector('maki-identity');
        console.log('[MAKI:IDENTITY]', '_attach');
        
        if ('serviceWorker' in navigator) {
          navigator.serviceWorker.register('/worker.js').then(function(reg) {
            console.log('[MAKI:IDENTITY]', 'service worker installled!');
            
            navigator.serviceWorker.addEventListener('message', function(event) {
              console.log('[MAKI:IDENTITY]', 'serviceworker message:', event );
            });
            
          }).catch(function(err) {
            console.log('[MAKI:IDENTITY]', 'service worker failed:', err);
          });
        }

        db._retrieve('/identities', function(err, identities) {
          console.warn('[MAKI:IDENTITY]', 'retrieved', identities);
          self.identities = identities;
          if (identities && identities.length) {
            self.hasIdentities = true;
            if (self.autoselect) {
              self.identity = identities[0];
              manager._register();
            }
          }
          self._initializeDropdown();
        });
      },
      _logout: function() {
        var self = this;
        self.identity = null;
        self.isLoggedIn = false;
        console.log('[MAKI:IDENTITY]', '_logout', self.identity);
        self.fire('identity', null);
        self._initializeDropdown();
      },
      attached: function() {
        var self = this;
        console.log('[MAKI:IDENTITY]', 'attached');
        self._initializeDropdown();
      },
      ready: function() {
        var self = this;
        console.log('[MAKI:IDENTITY]', 'ready');
        document.addEventListener('datastore:identity:open', self._attach.bind(self), false);
        //self.addEventListener('identity', self._initializeDropdown.bind(self), false);
      }
    });
